@model Hana.Models.UserProfile

<style>
    .info-card {
        transition: transform 0.2s;
        border: 1px solid #dee2e6;
    }

        .info-card:hover {
            transform: translateY(-5px);
        }

    .profile-gallery img {
        transition: transform 0.3s;
    }

        .profile-gallery img:hover {
            transform: scale(1.05);
        }

    .form-row {
        margin-bottom: 10px; /* Adjust this value as needed */
    }

    .message-section, .social-media-section {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-top: 20px;
    }

    .image-wrapper {
        position: relative;
        padding-bottom: 100%;
        cursor: grab;
    }

    .image-wrapper:active {
        cursor: grabbing;
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
        opacity: 0;
        transition: opacity 0.3s;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .image-item:hover .image-overlay {
        opacity: 1;
    }

    .main-profile-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255, 107, 107, 0.9);
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
    }

    .sortable-ghost {
        opacity: 0.4;
    }

    .image-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        padding: 1rem;
    }

    .image-wrapper img {
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
    }

    .main-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255, 107, 107, 0.9);
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        z-index: 2;
    }

    .delete-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.5);
        border: none;
        color: white;
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .delete-btn:hover {
        color: #ff6b6b;
        background: rgba(0, 0, 0, 0.7);
    }

    .crop-btn {
        position: absolute;
        bottom: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.5);
        border: none;
        color: white;
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .crop-btn:hover {
        color: #4CAF50;
        background: rgba(0, 0, 0, 0.7);
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        position: relative;
        background: white;
        width: 80%;
        max-width: 800px;
        margin: 2rem auto;
        border-radius: 8px;
    }

    .modal-header {
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
    }

    .modal-body {
        padding: 1rem;
        max-height: 70vh;
        overflow: hidden;
    }

    .modal-footer {
        padding: 1rem;
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        border-top: 1px solid #ddd;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .button-group {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        gap: 8px;
    }
</style>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-lg rounded-lg">
                <div class="card-header text-center position-relative" style="background: linear-gradient(45deg, #ff6b6b, #ff8e8e); padding: 20px;">
                    <h2 class="text-white mb-0" style="font-size: 2.5rem;">@Model.Name</h2>
                    <p class="text-white mb-0">@Model.Age years old â€¢ @Model.Nationality</p>
                </div>

                <div class="card-body p-4">
                    <!-- Profile Pictures Gallery -->
                    <div class="profile-pictures">
                        <h4>Profile Pictures <small>(Drag to reorder - first image is main profile)</small></h4>
                        <div class="image-grid" id="sortableGallery">
                            @foreach (var imageUrl in Model.ImageUrls)
                            {
                                <div class="image-item" data-image="@imageUrl">
                                    <div class="image-wrapper">
                                        <img src="@imageUrl" alt="Profile Picture" />
                                        @if (Model.ImageUrls.IndexOf(imageUrl) == 0)
                                        {
                                            <div class="main-badge">
                                                <i class="fas fa-star"></i> Main Profile
                                            </div>
                                        }
                                        <div class="image-overlay">
                                            <button class="delete-btn" onclick="deleteImage('@imageUrl')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                            <button class="crop-btn" onclick="openCropModal('@imageUrl')">
                                                <i class="fas fa-crop-alt"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Profile Info Cards -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="info-card p-3 rounded" style="background-color: #f8f9fa;">
                                <h5 class="text-primary"><i class="fas fa-language mr-2"></i> Languages</h5>
                                <p class="mb-1"><strong>Speaks:</strong> @Model.SpeakLanguage</p>
                                <p><strong>Learning:</strong> @Model.LearnLanguage</p>
                            </div>
                        </div>

                        <div class="col-md-6 mb-3">
                            <div class="info-card p-3 rounded" style="background-color: #f8f9fa;">
                                <h5 class="text-primary"><i class="fas fa-heart mr-2"></i> Interests</h5>
                                <p>@Model.Interest</p>
                            </div>
                        </div>
                    </div>

                    <!-- Bio Section -->
                    <div class="bio-section mt-3 p-3 rounded" style="background-color: #f8f9fa;">
                        <h5 class="text-primary"><i class="fas fa-user mr-2"></i> About Me</h5>
                        <p class="lead">@Model.Bio</p>
                    </div>

                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                            @TempData["Success"]
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    }

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                            @TempData["Error"]
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    }

                    @if (User.Identity.IsAuthenticated && User.Identity.Name != Model.User.UserName)
                    {
                        <!-- Show message form to everyone except profile owner -->
                        <div class="combined-section mt-3">
                            <h5 class="text-primary"><i class="fas fa-comment mr-2"></i> Send a Message & Attach Social Media</h5>
                            <form method="post" action="@Url.Action("SendMessage", "Message")" class="needs-validation" novalidate>
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="receiverId" value="@Model.UserId" />
                                <div class="form-group">
                                    <textarea name="message" class="form-control" rows="3" placeholder="Type your message here..." required></textarea>
                                    <div class="invalid-feedback">
                                        Please enter a message.
                                    </div>
                                </div>
                                <div class="form-row d-flex align-items-end">
                                    <div class="col-md-6">
                                        <label for="socialMediaPlatform">Choose Social Media:</label>
                                        <select name="socialMediaPlatform" id="socialMediaPlatform" class="form-control" required>
                                            <option value="">Select...</option>
                                            <option value="Instagram">Instagram</option>
                                            <option value="Facebook">Facebook</option>
                                            <option value="Twitter">Twitter</option>
                                            <option value="LinkedIn">LinkedIn</option>
                                        </select>
                                        <div class="invalid-feedback">
                                            Please select a social media platform.
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="socialMediaLink">Account Link:</label>
                                        <input type="text" name="socialMediaLink" class="form-control" placeholder="Enter your account link" required />
                                        <div class="invalid-feedback">
                                            Please enter your social media link.
                                        </div>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary mt-3">Send Message & Attach</button>
                            </form>
                        </div>
                    }

                    @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.User.UserName)
                    {
                        <!-- Show received messages only to profile owner -->
                        <div class="messages-section mt-4">
                            <h5 class="text-primary"><i class="fas fa-envelope mr-2"></i> Messages Received</h5>
                            <div id="messagesContainer">
                                <!-- Messages will be loaded here -->
                            </div>
                            <button onclick="loadMessages()" class="btn btn-primary mt-2">Load Messages</button>
                        </div>

                        <!-- Add JavaScript to load messages -->
                        <script>
                            async function loadMessages() {
                                try {
                                    const response = await fetch('@Url.Action("GetMyMessages", "Message")');
                                    if (response.ok) {
                                        const messages = await response.json();
                                        const container = document.getElementById('messagesContainer');
                                        container.innerHTML = ''; // Clear existing messages
                                        
                                        if (messages.length === 0) {
                                            container.innerHTML = '<div class="alert alert-info">No messages received yet.</div>';
                                            return;
                                        }
                                        
                                        messages.forEach(msg => {
                                            const messageDiv = document.createElement('div');
                                            messageDiv.className = 'card mb-3';
                                            messageDiv.innerHTML = `
                                                <div class="card-body">
                                                    <h6 class="card-subtitle mb-2 text-muted">From: ${msg.sender.userName}</h6>
                                                    <p class="card-text">${msg.content}</p>
                                                    <div class="social-media-info">
                                                        <strong>${msg.socialMediaPlatform}:</strong> 
                                                        <a href="${msg.socialMediaLink}" target="_blank">${msg.socialMediaLink}</a>
                                                    </div>
                                                    <small class="text-muted">Sent: ${new Date(msg.createdAt).toLocaleString()}</small>
                                                </div>
                                            `;
                                            container.appendChild(messageDiv);
                                        });
                                    }
                                } catch (error) {
                                    console.error('Error loading messages:', error);
                                    const container = document.getElementById('messagesContainer');
                                    container.innerHTML = '<div class="alert alert-danger">Error loading messages. Please try again.</div>';
                                }
                            }

                            // Add form validation
                            (function() {
                                'use strict';
                                window.addEventListener('load', function() {
                                    var forms = document.getElementsByClassName('needs-validation');
                                    var validation = Array.prototype.filter.call(forms, function(form) {
                                        form.addEventListener('submit', function(event) {
                                            if (form.checkValidity() === false) {
                                                event.preventDefault();
                                                event.stopPropagation();
                                            }
                                            form.classList.add('was-validated');
                                        }, false);
                                    });
                                }, false);
                            })();
                        </script>
                    }

                    @if (!string.IsNullOrEmpty(Model.InstagramAccount))
                    {
                        <div class="social-section mt-3">
                            <a href="https://instagram.com/@Model.InstagramAccount" target="_blank" class="btn btn-outline-primary">
                                <i class="fab fa-instagram"></i> @Model.InstagramAccount
                            </a>
                        </div>
                    }

                    <div class="text-center mt-4">
                        <a asp-action="Edit" class="btn btn-lg btn-primary rounded-pill px-5">Edit Profile</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Crop Modal -->
<div class="modal" id="cropModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5>Crop Image</h5>
            <button type="button" class="close-modal" onclick="closeCropModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div class="img-container">
                <img id="cropImage" src="" alt="Image to crop">
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" onclick="closeCropModal()">Cancel</button>
            <button type="button" id="cropButton">Crop & Save</button>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const gallery = document.getElementById('sortableGallery');
            if (gallery) {
                new Sortable(gallery, {
                    animation: 150,
                    ghostClass: 'sortable-ghost',
                    onEnd: function(evt) {
                        const images = Array.from(evt.to.children).map(el => el.dataset.image);
                        updateImageOrder(images);
                    }
                });
            }
        });

        async function updateImageOrder(images) {
            try {
                const response = await fetch('/UserProfile/UpdateImageOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ imageUrls: images })
                });

                if (response.ok) {
                    location.reload();
                }
            } catch (error) {
                console.error('Error updating image order:', error);
            }
        }

        async function deleteImage(imageUrl) {
            if (!confirm('Are you sure you want to delete this image?')) return;
            
            try {
                const response = await fetch('/UserProfile/DeleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(imageUrl)
                });

                if (response.ok) {
                    location.reload();
                }
            } catch (error) {
                console.error('Error deleting image:', error);
            }
        }

        let cropper = null;
        let currentImageUrl = '';
        let originalImageUrl = '';

        function openCropModal(imageUrl) {
            // Extract the original image URL from the current URL
            originalImageUrl = imageUrl.replace('_cropped.jpg', '.jpg');
            currentImageUrl = imageUrl;
            
            const modal = document.getElementById('cropModal');
            const image = document.getElementById('cropImage');
            
            // Always use the original image for cropping
            image.src = originalImageUrl;
            modal.style.display = 'block';
            
            image.onload = function() {
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 2,
                });
            };
        }

        function closeCropModal() {
            const modal = document.getElementById('cropModal');
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            modal.style.display = 'none';
        }

        document.getElementById('cropButton').addEventListener('click', async function() {
            if (!cropper) return;

            try {
                const canvas = cropper.getCroppedCanvas();
                const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg'));
                
                const formData = new FormData();
                formData.append('image', blob, 'cropped.jpg');
                formData.append('imageUrl', originalImageUrl);

                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const response = await fetch('/UserProfile/CropImage', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    // Find and update all images with either the current URL or original URL
                    const allImages = document.querySelectorAll('img');
                    allImages.forEach(img => {
                        if (img.src.includes(currentImageUrl) || img.src.includes(originalImageUrl)) {
                            // Add timestamp to force browser to reload the image
                            img.src = `${result.croppedUrl}?t=${new Date().getTime()}`;
                        }
                    });
                    currentImageUrl = result.croppedUrl;
                    closeCropModal();
                } else {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                }
            } catch (error) {
                console.error('Error cropping image:', error);
            }
        });

        // Close modal when clicking outside
        document.getElementById('cropModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCropModal();
            }
        });
    </script>
}
}